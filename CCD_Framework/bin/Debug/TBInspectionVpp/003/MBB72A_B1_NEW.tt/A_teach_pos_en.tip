// KAIROVersion 2.00
GOTO TakeBelt_1
GOTO TakeBelt_2
GOTO Place1

//Teach HOME program
//At the top of the annotated section are the points to be taught, respectively  /ap_home/ap_home_n/ap_home_p/
WHILE TRUE DO

RefSys(World)
WaitIsFinished()
WHILE NOT HomePosArea.isInside DO
   Error("Outside of start area")
END_WHILE

   PTP(ap_home)
   //HOME_POS teach
   PTPRel(rotate_270)
   PTP(ap_home_n)
   //HOME_POS -90 teach
   PTP(ap_home)
   PTPRel(rotate_90)
   PTP(ap_home_p)
   //HOME_POS 90 teach
   PTP(ap_home)
   
WaitTime(999999999)
END_WHILE






LABEL TakeBelt_1
//Teach TAKE_BEIF_1 program
//At the top of the annotated section are the points to be taught, respectively /turn1P/ap_ready_1p/TakeWeld_1P_base/Place_1NgBox_base
WHILE TRUE DO

RefSys(World)
WaitIsFinished()
WHILE NOT HomePosArea.isInside DO
   Error("Outside of start area")
END_WHILE

PTP(ap_home)
PTP(turn1P)
//1P_turn  /Let's move the origin to the y axis in the direction of belt_1 50cm
PTP(ap_ready_1p)
//1p_ready /A、Make sure it's in belt 1 safety   B、Make sure you don't collide when you move from the previous point
//  C、Make sure you don't bump into each other by moving in from the previous point

belt1_Area.Activate()

RefSys(refTOPUP)
Lin(TakeWeld_1P_base)
RefSys(refTOP)
Lin(TakeWeld_1P_base)
RefSys(World)
Lin(TakeWeld_1P_base, velPut)
//1p_Take  /A、Make sure it's in belt 1 safety   B、Make sure you don't collide when you move from the previous point
//    C、Make sure you set the grab point level and teach in world coordinates   D、The program is only roughly teach
RefSys(refTOP)
Lin(TakeWeld_1P_base, velPut)
RefSys(refTOPUP)
Lin(TakeWeld_1P_base)
RefSys(World)
Lin(ap_ready_1p)
RefSys(refTOPUP)
Lin(Place_1NgBox_base)
RefSys(refTOP)
Lin(Place_1NgBox_base)
RefSys(World)
Lin(Place_1NgBox_base, velPut)
//1ngbox_palce_pos /A、Make sure it's in belt 1 safety   B、Make sure you don't collide when you move from the previous point
RefSys(refTOP)
Lin(Place_1NgBox_base, velPut)
RefSys(refTOPUP)
Lin(Place_1NgBox_base)

RefSys(World)
Lin(ap_ready_1p)

belt1_Area.Deactivate()

PTP(turn1P)
PTP(ap_home)

WaitTime(999999999)
END_WHILE







LABEL TakeBelt_2
//Teach TAKE_BEIF_2 program
//At the top of the annotated section are the points to be taught, respectively /turn2P/ap_ready_2p/TakeWeld_2P_base/Place_2NgBox_base
WHILE TRUE DO

RefSys(World)
WaitIsFinished()
WHILE NOT HomePosArea.isInside DO
   Error("Outside of start area")
END_WHILE

PTP(ap_home)
PTP(turn2P)
//2P_turn   /Let's move the origin to the y axis in the direction of belt_2 50cm
PTP(ap_ready_2p)
//2p_ready  /A、Make sure it's in belt 2 safety   B、Make sure you don't collide when you move from the previous point
//  C、Make sure you don't bump into each other by moving in from the previous point


belt2_Area.Activate()

RefSys(refTOPUP)
Lin(TakeWeld_2P_base)
RefSys(refTOP)
Lin(TakeWeld_2P_base)
RefSys(World)
Lin(TakeWeld_2P_base, velPut)
//2p_Take   /A、Make sure it's in belt 2 safety   B、Make sure you don't collide when you move from the previous point
//    C、Make sure you set the grab point level and teach in world coordinates   D、The program is only roughly teach
RefSys(refTOP)
Lin(TakeWeld_2P_base, velPut)
RefSys(refTOPUP)
Lin(TakeWeld_2P_base)
RefSys(World)
Lin(ap_ready_2p)
RefSys(refTOPUP)
Lin(Place_2NgBox_base)
RefSys(refTOP)
Lin(Place_2NgBox_base)
RefSys(World)
Lin(Place_2NgBox_base, velPut)
//2ngbox_palce_pos /A、Make sure it's in belt 2 safety   B、Make sure you don't collide when you move from the previous point
RefSys(refTOP)
Lin(Place_2NgBox_base, velPut)
RefSys(refTOPUP)
Lin(Place_2NgBox_base)

RefSys(World)
Lin(ap_ready_2p)

belt2_Area.Deactivate()

PTP(turn2P)
PTP(ap_home)

WaitTime(999999999)
END_WHILE




LABEL Place1
//Teach Place program
//At the top of the annotated section are the points to be taught, respectivel /basePOS_P[1] /basePOS_N[1]
WHILE TRUE DO

RefSys(World)
WaitIsFinished()
WHILE NOT HomePosArea.isInside DO
   Error("Outside of start area")
END_WHILE

 place_Area.Activate()
 PTP(ap_home)
 WAIT iGlass.val
 
 PTP(ap_home_p,adHome,or100)
 RefSys(refBoardup)
 Lin(basePOS[1])
 RefSys(refBoard)
 Lin(basePOS[1], vellift)
//basePOS_P[1]：
//A. only try to teach this point if there is A big problem or if there is A preliminary adjustment. 
//B. when teaching this point, take A piece of battery that has been compensated (to teach).
//C. if you want the placement point to coincide with the teaching point, you must clear all compensation values. 
//D. the teaching point must be placed in the safety zone and taught in the refBoard coordinate system.
//E. make sure that the level 
//F. The position of the cell at this point needs to coincide with the position of the cell at basePOS_N[1] as far as possible
//G. the placement point should be about the same as the Angle of axis c at ap_home_p

 RefSys(refBoardup)
 Lin(basePOS[1], vellift)
 RefSys(World)
 PTP(ap_home_p)
 
 
 PTP(ap_home_n)
 RefSys(refBoardup)
 Lin(basePOS_N[1])
 RefSys(refBoard)
 Lin(basePOS_N[1], vellift)
//basePOS_N[1]
//A. only try to teach this point if there is A big problem or if there is A preliminary adjustment. 
//B. when teaching this point, take A piece of battery that has been compensated (to teach).
//C. if you want the placement point to coincide with the teaching point, you must clear all compensation values. 
//D. the teaching point must be placed in the safety zone and taught in the refBoard coordinate system.
//E. make sure that the level 
//F. The position of the cell at this point needs to coincide with the position of the cell at basePOS[1] as far as possible
//G. the placement point should be about the same as the Angle of axis c at ap_home_N

 RefSys(refBoardup)
 Lin(basePOS_N[1], vellift)
 RefSys(World)
 PTP(ap_home_n)
 
 PTP(ap_home, adHome)
 place_Area.Deactivate() 
 
WaitTime(999999999)
END_WHILE

